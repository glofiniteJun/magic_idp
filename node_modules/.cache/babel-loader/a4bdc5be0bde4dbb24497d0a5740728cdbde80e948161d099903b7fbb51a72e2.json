{"ast":null,"code":"var o = (i => (i.MissingApiKey = \"MISSING_API_KEY\", i.ModalNotReady = \"MODAL_NOT_READY\", i.MalformedResponse = \"MALFORMED_RESPONSE\", i.InvalidArgument = \"INVALID_ARGUMENT\", i.ExtensionNotInitialized = \"EXTENSION_NOT_INITIALIZED\", i.IncompatibleExtensions = \"INCOMPATIBLE_EXTENSIONS\", i))(o || {}),\n  _ = (a => (a.SyncWeb3Method = \"SYNC_WEB3_METHOD\", a.DuplicateIframe = \"DUPLICATE_IFRAME\", a.ReactNativeEndpointConfiguration = \"REACT_NATIVE_ENDPOINT_CONFIGURATION\", a.DeprecationNotice = \"DEPRECATION_NOTICE\", a))(_ || {}),\n  m = (t => (t[t.ParseError = -32700] = \"ParseError\", t[t.InvalidRequest = -32600] = \"InvalidRequest\", t[t.MethodNotFound = -32601] = \"MethodNotFound\", t[t.InvalidParams = -32602] = \"InvalidParams\", t[t.InternalError = -32603] = \"InternalError\", t[t.MagicLinkFailedVerification = -1e4] = \"MagicLinkFailedVerification\", t[t.MagicLinkExpired = -10001] = \"MagicLinkExpired\", t[t.MagicLinkRateLimited = -10002] = \"MagicLinkRateLimited\", t[t.MagicLinkInvalidRedirectURL = -10006] = \"MagicLinkInvalidRedirectURL\", t[t.UserAlreadyLoggedIn = -10003] = \"UserAlreadyLoggedIn\", t[t.UpdateEmailFailed = -10004] = \"UpdateEmailFailed\", t[t.UserRequestEditEmail = -10005] = \"UserRequestEditEmail\", t[t.InactiveRecipient = -10010] = \"InactiveRecipient\", t[t.AccessDeniedToUser = -10011] = \"AccessDeniedToUser\", t[t.RedirectLoginComplete = -10015] = \"RedirectLoginComplete\", t))(m || {});\nvar p = (s => (s.MetaMask = \"metamask\", s.CoinbaseWallet = \"coinbase_wallet\", s))(p || {}),\n  c = (n => (n.WalletSelected = \"wallet_selected\", n.WalletConnected = \"wallet_connected\", n.WalletRejected = \"wallet_rejected\", n))(c || {}),\n  l = (e => (e.LoginWithSms = \"magic_auth_login_with_sms\", e.LoginWithEmailOTP = \"magic_auth_login_with_email_otp\", e.LoginWithMagicLink = \"magic_auth_login_with_magic_link\", e.LoginWithCredential = \"magic_auth_login_with_credential\", e.SetAuthorizationToken = \"magic_auth_set_authorization_token\", e.GetIdToken = \"magic_auth_get_id_token\", e.GenerateIdToken = \"magic_auth_generate_id_token\", e.GetMetadata = \"magic_auth_get_metadata\", e.IsLoggedIn = \"magic_is_logged_in\", e.Logout = \"magic_auth_logout\", e.UpdateEmail = \"magic_auth_update_email\", e.UserSettings = \"magic_auth_settings\", e.UserSettingsTestMode = \"magic_auth_settings_testing_mode\", e.LoginWithSmsTestMode = \"magic_auth_login_with_sms_testing_mode\", e.LoginWithEmailOTPTestMode = \"magic_auth_login_with_email_otp_testing_mode\", e.LoginWithMagicLinkTestMode = \"magic_login_with_magic_link_testing_mode\", e.LoginWithCredentialTestMode = \"magic_auth_login_with_credential_testing_mode\", e.GetIdTokenTestMode = \"magic_auth_get_id_token_testing_mode\", e.GenerateIdTokenTestMode = \"magic_auth_generate_id_token_testing_mode\", e.GetMetadataTestMode = \"magic_auth_get_metadata_testing_mode\", e.IsLoggedInTestMode = \"magic_auth_is_logged_in_testing_mode\", e.LogoutTestMode = \"magic_auth_logout_testing_mode\", e.UpdateEmailTestMode = \"magic_auth_update_email_testing_mode\", e.IntermediaryEvent = \"magic_intermediary_event\", e.RequestAccounts = \"eth_requestAccounts\", e.GetInfo = \"magic_get_info\", e.ShowUI = \"magic_wallet\", e.NFTPurchase = \"magic_nft_purchase\", e.NFTCheckout = \"magic_nft_checkout\", e.NFTTransfer = \"magic_nft_transfer\", e.RequestUserInfoWithUI = \"mc_request_user_info\", e.Disconnect = \"mc_disconnect\", e.RecoverAccount = \"magic_auth_recover_account\", e.RecoverAccountTestMode = \"magic_auth_recover_account_testing_mode\", e.MagicBoxHeartBeat = \"magic_box_heart_beat\", e.AutoConnect = \"mc_auto_connect\", e.Login = \"mc_login\", e.EncryptV1 = \"magic_auth_encrypt_v1\", e.DecryptV1 = \"magic_auth_decrypt_v1\", e.ShowNFTs = \"magic_show_nfts\", e.ShowOnRamp = \"magic_show_fiat_onramp\", e.ShowSendTokensUI = \"magic_show_send_tokens_ui\", e.ShowAddress = \"magic_show_address\", e.ShowBalances = \"magic_show_balances\", e.SendGaslessTransaction = \"eth_sendGaslessTransaction\", e))(l || {});\nvar u = (i => (i.MAGIC_HANDLE_RESPONSE = \"MAGIC_HANDLE_RESPONSE\", i.MAGIC_OVERLAY_READY = \"MAGIC_OVERLAY_READY\", i.MAGIC_SHOW_OVERLAY = \"MAGIC_SHOW_OVERLAY\", i.MAGIC_HIDE_OVERLAY = \"MAGIC_HIDE_OVERLAY\", i.MAGIC_HANDLE_EVENT = \"MAGIC_HANDLE_EVENT\", i.MAGIC_MG_BOX_SEND_RECEIPT = \"MAGIC_MG_BOX_SEND_RECEIPT\", i))(u || {}),\n  g = (r => (r.MAGIC_HANDLE_REQUEST = \"MAGIC_HANDLE_REQUEST\", r))(g || {});\nvar f = (n => (n.UpdateEmail = \"update-email\", n.MFA = \"mfa\", n.Recovery = \"recovery\", n))(f || {});\nvar v = (r => (r.Retry = \"retry\", r))(v || {}),\n  E = (s => (s.EmailSent = \"email-sent\", s.EmailNotDeliverable = \"email-not-deliverable\", s))(E || {}),\n  I = (s => (s.VerifyEmailOtp = \"verify-email-otp\", s.Cancel = \"cancel\", s))(I || {}),\n  x = (n => (n.EmailOTPSent = \"email-otp-sent\", n.InvalidEmailOtp = \"invalid-email-otp\", n.ExpiredEmailOtp = \"expired-email-otp\", n))(x || {}),\n  T = (r => (r.Retry = \"device-retry\", r))(T || {}),\n  A = (a => (a.DeviceApproved = \"device-approved\", a.DeviceNeedsApproval = \"device-needs-approval\", a.DeviceVerificationLinkExpired = \"device-verification-link-expired\", a.DeviceVerificationEmailSent = \"device-verification-email-sent\", a))(A || {});\nvar R = (r => (r.Harmony = \"HARMONY\", r))(R || {});\nvar N = (r => (r.PhoneNumber = \"phone_number\", r))(N || {});\nexport { f as DeepLinkPage, T as DeviceVerificationEventEmit, A as DeviceVerificationEventOnReceived, R as EthChainType, c as Events, I as LoginWithEmailOTPEventEmit, x as LoginWithEmailOTPEventOnReceived, v as LoginWithMagicLinkEventEmit, E as LoginWithMagicLinkEventOnReceived, u as MagicIncomingWindowMessage, g as MagicOutgoingWindowMessage, l as MagicPayloadMethod, m as RPCErrorCode, N as RecoveryMethodType, o as SDKErrorCode, _ as SDKWarningCode, p as Wallets };","map":{"version":3,"names":["o","i","MissingApiKey","ModalNotReady","MalformedResponse","InvalidArgument","ExtensionNotInitialized","IncompatibleExtensions","_","a","SyncWeb3Method","DuplicateIframe","ReactNativeEndpointConfiguration","DeprecationNotice","m","t","ParseError","InvalidRequest","MethodNotFound","InvalidParams","InternalError","MagicLinkFailedVerification","MagicLinkExpired","MagicLinkRateLimited","MagicLinkInvalidRedirectURL","UserAlreadyLoggedIn","UpdateEmailFailed","UserRequestEditEmail","InactiveRecipient","AccessDeniedToUser","RedirectLoginComplete","p","s","MetaMask","CoinbaseWallet","c","n","WalletSelected","WalletConnected","WalletRejected","l","e","LoginWithSms","LoginWithEmailOTP","LoginWithMagicLink","LoginWithCredential","SetAuthorizationToken","GetIdToken","GenerateIdToken","GetMetadata","IsLoggedIn","Logout","UpdateEmail","UserSettings","UserSettingsTestMode","LoginWithSmsTestMode","LoginWithEmailOTPTestMode","LoginWithMagicLinkTestMode","LoginWithCredentialTestMode","GetIdTokenTestMode","GenerateIdTokenTestMode","GetMetadataTestMode","IsLoggedInTestMode","LogoutTestMode","UpdateEmailTestMode","IntermediaryEvent","RequestAccounts","GetInfo","ShowUI","NFTPurchase","NFTCheckout","NFTTransfer","RequestUserInfoWithUI","Disconnect","RecoverAccount","RecoverAccountTestMode","MagicBoxHeartBeat","AutoConnect","Login","EncryptV1","DecryptV1","ShowNFTs","ShowOnRamp","ShowSendTokensUI","ShowAddress","ShowBalances","SendGaslessTransaction","u","MAGIC_HANDLE_RESPONSE","MAGIC_OVERLAY_READY","MAGIC_SHOW_OVERLAY","MAGIC_HIDE_OVERLAY","MAGIC_HANDLE_EVENT","MAGIC_MG_BOX_SEND_RECEIPT","g","r","MAGIC_HANDLE_REQUEST","f","MFA","Recovery","v","Retry","E","EmailSent","EmailNotDeliverable","I","VerifyEmailOtp","Cancel","x","EmailOTPSent","InvalidEmailOtp","ExpiredEmailOtp","T","A","DeviceApproved","DeviceNeedsApproval","DeviceVerificationLinkExpired","DeviceVerificationEmailSent","R","Harmony","N","PhoneNumber","DeepLinkPage","DeviceVerificationEventEmit","DeviceVerificationEventOnReceived","EthChainType","Events","LoginWithEmailOTPEventEmit","LoginWithEmailOTPEventOnReceived","LoginWithMagicLinkEventEmit","LoginWithMagicLinkEventOnReceived","MagicIncomingWindowMessage","MagicOutgoingWindowMessage","MagicPayloadMethod","RPCErrorCode","RecoveryMethodType","SDKErrorCode","SDKWarningCode","Wallets"],"sources":["/Users/gmoon/Documents/GitHub/magic_idp/node_modules/@magic-sdk/types/src/core/exception-types.ts","/Users/gmoon/Documents/GitHub/magic_idp/node_modules/@magic-sdk/types/src/core/json-rpc-types.ts","/Users/gmoon/Documents/GitHub/magic_idp/node_modules/@magic-sdk/types/src/core/message-types.ts","/Users/gmoon/Documents/GitHub/magic_idp/node_modules/@magic-sdk/types/src/core/deep-link-pages.ts","/Users/gmoon/Documents/GitHub/magic_idp/node_modules/@magic-sdk/types/src/modules/auth-types.ts","/Users/gmoon/Documents/GitHub/magic_idp/node_modules/@magic-sdk/types/src/modules/rpc-provider-types.ts","/Users/gmoon/Documents/GitHub/magic_idp/node_modules/@magic-sdk/types/src/modules/user-types.ts"],"sourcesContent":["export enum SDKErrorCode {\n  MissingApiKey = 'MISSING_API_KEY',\n  ModalNotReady = 'MODAL_NOT_READY',\n  MalformedResponse = 'MALFORMED_RESPONSE',\n  InvalidArgument = 'INVALID_ARGUMENT',\n  ExtensionNotInitialized = 'EXTENSION_NOT_INITIALIZED',\n  IncompatibleExtensions = 'INCOMPATIBLE_EXTENSIONS',\n}\n\nexport enum SDKWarningCode {\n  SyncWeb3Method = 'SYNC_WEB3_METHOD',\n  DuplicateIframe = 'DUPLICATE_IFRAME',\n  ReactNativeEndpointConfiguration = 'REACT_NATIVE_ENDPOINT_CONFIGURATION',\n  DeprecationNotice = 'DEPRECATION_NOTICE',\n}\n\nexport enum RPCErrorCode {\n  // Standard JSON RPC 2.0 Error Codes\n  ParseError = -32700,\n  InvalidRequest = -32600,\n  MethodNotFound = -32601,\n  InvalidParams = -32602,\n  InternalError = -32603,\n\n  // Custom RPC Error Codes\n  MagicLinkFailedVerification = -10000,\n  MagicLinkExpired = -10001,\n  MagicLinkRateLimited = -10002,\n  MagicLinkInvalidRedirectURL = -10006,\n  UserAlreadyLoggedIn = -10003,\n  UpdateEmailFailed = -10004,\n  UserRequestEditEmail = -10005,\n  InactiveRecipient = -10010,\n  AccessDeniedToUser = -10011,\n  RedirectLoginComplete = -10015,\n}\n\nexport type ErrorCode = SDKErrorCode | RPCErrorCode;\nexport type WarningCode = SDKWarningCode;\n","import { RPCErrorCode } from './exception-types';\n\n// --- Request interfaces\n\nexport interface JsonRpcRequestPayload<TParams = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  method: string;\n  params?: TParams;\n}\n\nexport interface JsonRpcRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: JsonRpcResponsePayload | null): void;\n}\n\nexport interface JsonRpcBatchRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: (JsonRpcResponsePayload | null)[] | null): void;\n}\n\n// --- Response interfaces\n\nexport interface JsonRpcError {\n  message: string;\n  code: RPCErrorCode;\n  data?: any;\n}\n\nexport interface JsonRpcResponsePayload<ResultType = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  result?: ResultType | null;\n  error?: JsonRpcError | null;\n}\n\nexport interface UserInfo {\n  email?: string;\n}\n\nexport interface WalletInfo {\n  walletType: 'magic' | 'metamask' | 'coinbase_wallet';\n}\n\nexport interface RequestUserInfoScope {\n  scope?: {\n    email?: 'required' | 'optional';\n  };\n}\n\nexport enum Wallets {\n  MetaMask = 'metamask',\n  CoinbaseWallet = 'coinbase_wallet',\n}\n\nexport enum Events {\n  WalletSelected = 'wallet_selected',\n  WalletConnected = 'wallet_connected',\n  WalletRejected = 'wallet_rejected',\n}\n\nexport interface UserEnv {\n  env: {\n    isMetaMaskInstalled: boolean;\n    isCoinbaseWalletInstalled: boolean;\n  };\n}\n\n// --- Payload methods\n\n/**\n * Enum of JSON RPC methods for interacting with the Magic SDK authentication\n * relayer.\n */\nexport enum MagicPayloadMethod {\n  LoginWithSms = 'magic_auth_login_with_sms',\n  LoginWithEmailOTP = 'magic_auth_login_with_email_otp',\n  LoginWithMagicLink = 'magic_auth_login_with_magic_link',\n  LoginWithCredential = 'magic_auth_login_with_credential',\n  SetAuthorizationToken = 'magic_auth_set_authorization_token',\n  GetIdToken = 'magic_auth_get_id_token',\n  GenerateIdToken = 'magic_auth_generate_id_token',\n  GetMetadata = 'magic_auth_get_metadata',\n  IsLoggedIn = 'magic_is_logged_in',\n  Logout = 'magic_auth_logout',\n  UpdateEmail = 'magic_auth_update_email',\n  UserSettings = 'magic_auth_settings',\n  UserSettingsTestMode = 'magic_auth_settings_testing_mode',\n  LoginWithSmsTestMode = 'magic_auth_login_with_sms_testing_mode',\n  LoginWithEmailOTPTestMode = 'magic_auth_login_with_email_otp_testing_mode',\n  LoginWithMagicLinkTestMode = 'magic_login_with_magic_link_testing_mode',\n  LoginWithCredentialTestMode = 'magic_auth_login_with_credential_testing_mode',\n  GetIdTokenTestMode = 'magic_auth_get_id_token_testing_mode',\n  GenerateIdTokenTestMode = 'magic_auth_generate_id_token_testing_mode',\n  GetMetadataTestMode = 'magic_auth_get_metadata_testing_mode',\n  IsLoggedInTestMode = 'magic_auth_is_logged_in_testing_mode',\n  LogoutTestMode = 'magic_auth_logout_testing_mode',\n  UpdateEmailTestMode = 'magic_auth_update_email_testing_mode',\n  IntermediaryEvent = 'magic_intermediary_event',\n  RequestAccounts = 'eth_requestAccounts',\n  GetInfo = 'magic_get_info',\n  ShowUI = 'magic_wallet',\n  NFTPurchase = 'magic_nft_purchase',\n  NFTCheckout = 'magic_nft_checkout',\n  NFTTransfer = 'magic_nft_transfer',\n  RequestUserInfoWithUI = 'mc_request_user_info',\n  Disconnect = 'mc_disconnect',\n  // UpdatePhoneNumber = 'magic_auth_update_phone_number',\n  // UpdatePhoneNumberTestMode = 'magic_auth_update_phone_number_testing_mode',\n  RecoverAccount = 'magic_auth_recover_account',\n  RecoverAccountTestMode = 'magic_auth_recover_account_testing_mode',\n  MagicBoxHeartBeat = 'magic_box_heart_beat',\n  AutoConnect = 'mc_auto_connect',\n  Login = 'mc_login',\n  EncryptV1 = 'magic_auth_encrypt_v1',\n  DecryptV1 = 'magic_auth_decrypt_v1',\n  ShowNFTs = 'magic_show_nfts',\n  ShowOnRamp = 'magic_show_fiat_onramp',\n  ShowSendTokensUI = 'magic_show_send_tokens_ui',\n  ShowAddress = 'magic_show_address',\n  ShowBalances = 'magic_show_balances',\n  SendGaslessTransaction = 'eth_sendGaslessTransaction',\n}\n","import { JsonRpcResponsePayload, JsonRpcError, JsonRpcRequestPayload } from './json-rpc-types';\n\nexport enum MagicIncomingWindowMessage {\n  MAGIC_HANDLE_RESPONSE = 'MAGIC_HANDLE_RESPONSE',\n  MAGIC_OVERLAY_READY = 'MAGIC_OVERLAY_READY',\n  MAGIC_SHOW_OVERLAY = 'MAGIC_SHOW_OVERLAY',\n  MAGIC_HIDE_OVERLAY = 'MAGIC_HIDE_OVERLAY',\n  MAGIC_HANDLE_EVENT = 'MAGIC_HANDLE_EVENT',\n  MAGIC_MG_BOX_SEND_RECEIPT = 'MAGIC_MG_BOX_SEND_RECEIPT',\n}\n\nexport enum MagicOutgoingWindowMessage {\n  MAGIC_HANDLE_REQUEST = 'MAGIC_HANDLE_REQUEST',\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageRequest {\n  msgType: string;\n  payload: JsonRpcRequestPayload | JsonRpcRequestPayload[];\n  rt?: string;\n  jwt?: string;\n  deviceShare?: string;\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageResponse<ResultType = any> {\n  msgType: string;\n  response: Partial<JsonRpcError> & Partial<JsonRpcResponsePayload<ResultType>>;\n  rt?: string;\n  deviceShare?: string;\n}\n\n/** The expected message event returned by the Magic iframe context. */\nexport interface MagicMessageEvent extends Partial<MessageEvent> {\n  data: MagicMessageResponse;\n}\n","export enum DeepLinkPage {\n  UpdateEmail = 'update-email',\n  MFA = 'mfa',\n  Recovery = 'recovery',\n}\n","export interface LoginWithMagicLinkConfiguration {\n  /**\n   * The email address of the user attempting to login.\n   */\n  email: string;\n\n  /**\n   * When `true`, a pre-built modal interface will show to the user, directing\n   * them to check their email for the \"magic link\" to complete their\n   * authentication.\n   */\n  showUI?: boolean;\n\n  /**\n   * You can optionally provide a redirect URI that will be followed at the end\n   * of the magic link flow. Don't forget to invoke\n   * `magic.auth.loginWithCredential()` to complete the login from the route you\n   * configure here.\n   */\n  redirectURI?: string;\n\n  /**\n   * Enterprise users with a custom SMTP can create custom email templates\n   * from their dashboard. The default Magic loginWithMagicLink email will be\n   * overriden when a variation is passed here.\n   */\n  overrides?: {\n    variation?: string;\n  };\n}\n\nexport interface LoginWithSmsConfiguration {\n  /**\n   * Specify the phone number of the user attempting to login.\n   */\n  phoneNumber: string;\n}\nexport interface LoginWithEmailOTPConfiguration {\n  /**\n   * Specify the email address of the user attempting to login.\n   */\n  email: string;\n\n  /**\n   * When `true`, a pre-built modal interface will show to the user, directing\n   * them to check their email for the one time passcode (OTP) to complete their\n   * authentication.\n   *\n   * When `false`, developers will be able to implement their own custom UI to\n   * continue the email OTP flow.\n   */\n  showUI?: boolean;\n\n  /**\n   * Device Unrecognized UI will enforce showing up to secure user's login\n   *\n   * When set to true (default), an improved device recognition UI will be displayed to the user,\n   * prompting them to verify their login by checking their email for device approval. This feature\n   * enhances authentication security.\n   *\n   * This param will only be affect if showUI is false. When set to false,\n   * developers have the flexibility to implement their own customized UI to\n   * handle device check events, providing a more tailored user experience.\n   */\n  deviceCheckUI?: boolean;\n\n  /**\n   * Enterprise users with a custom SMTP can create custom email templates\n   * from their dashboard. The default Magic loginWithOTP email will be\n   * overriden when a variation is passed here.\n   */\n  overrides?: {\n    variation?: string;\n  };\n}\n\n/**\n * EventHandlers\n */\nexport type LoginWithMagicLinkEventHandlers = {\n  // Event Received\n  [LoginWithMagicLinkEventOnReceived.EmailSent]: () => void;\n  [LoginWithMagicLinkEventOnReceived.EmailNotDeliverable]: () => void;\n\n  // Event sent\n  [LoginWithMagicLinkEventEmit.Retry]: () => void;\n} & DeviceVerificationEventHandlers;\n\nexport type LoginWithEmailOTPEventHandlers = {\n  // Event Received\n  [LoginWithEmailOTPEventOnReceived.EmailOTPSent]: () => void;\n  [LoginWithEmailOTPEventOnReceived.InvalidEmailOtp]: () => void;\n  [LoginWithEmailOTPEventOnReceived.ExpiredEmailOtp]: () => void;\n\n  // Event sent\n  [LoginWithEmailOTPEventEmit.VerifyEmailOtp]: (otp: string) => void;\n  [LoginWithEmailOTPEventEmit.Cancel]: () => void;\n} & DeviceVerificationEventHandlers;\n\ntype DeviceVerificationEventHandlers = {\n  // Event Received\n  [DeviceVerificationEventOnReceived.DeviceNeedsApproval]: () => void;\n  [DeviceVerificationEventOnReceived.DeviceVerificationEmailSent]: () => void;\n  [DeviceVerificationEventOnReceived.DeviceVerificationLinkExpired]: () => void;\n  [DeviceVerificationEventOnReceived.DeviceApproved]: () => void;\n\n  // Event sent\n  [DeviceVerificationEventEmit.Retry]: () => void;\n};\n\n/**\n * Auth Events Enum\n */\nexport enum LoginWithMagicLinkEventEmit {\n  Retry = 'retry',\n}\n\nexport enum LoginWithMagicLinkEventOnReceived {\n  EmailSent = 'email-sent',\n  EmailNotDeliverable = 'email-not-deliverable',\n}\n\nexport enum LoginWithEmailOTPEventEmit {\n  VerifyEmailOtp = 'verify-email-otp',\n  Cancel = 'cancel',\n}\n\nexport enum LoginWithEmailOTPEventOnReceived {\n  EmailOTPSent = 'email-otp-sent',\n  InvalidEmailOtp = 'invalid-email-otp',\n  ExpiredEmailOtp = 'expired-email-otp',\n}\n\nexport enum DeviceVerificationEventEmit {\n  Retry = 'device-retry',\n}\n\nexport enum DeviceVerificationEventOnReceived {\n  DeviceApproved = 'device-approved',\n  DeviceNeedsApproval = 'device-needs-approval',\n  DeviceVerificationLinkExpired = 'device-verification-link-expired',\n  DeviceVerificationEmailSent = 'device-verification-email-sent',\n}\n","export type EthNetworkName = 'mainnet' | 'goerli' | 'sepolia';\n\nexport enum EthChainType {\n  Harmony = 'HARMONY',\n}\n\nexport interface CustomNodeConfiguration {\n  rpcUrl: string;\n  chainId?: number;\n  chainType?: EthChainType;\n}\n\nexport type EthNetworkConfiguration = EthNetworkName | CustomNodeConfiguration;\n\nexport type ProviderEnableEvents = {\n  'id-token-created': (params: { idToken: string }) => void;\n};\n","import { DeepLinkPage } from '../core/deep-link-pages';\n\nexport interface GetIdTokenConfiguration {\n  /**\n   * The number of seconds until the generated ID token will expire.\n   */\n  lifespan?: number;\n}\n\nexport interface GenerateIdTokenConfiguration extends GetIdTokenConfiguration {\n  /**\n   * An optional piece of data to sign with the token. Note, however, that the\n   * unsigned data _will not_ be encoded in the token, only an encrypted\n   * signature of the data.\n   */\n  attachment?: string;\n}\n\nexport interface MagicUserMetadata {\n  issuer: string | null;\n  publicAddress: string | null;\n  email: string | null;\n  phoneNumber: string | null;\n  isMfaEnabled: boolean;\n  recoveryFactors: [RecoveryFactor];\n}\n\ntype RecoveryFactor = {\n  type: RecoveryMethodType;\n  value: string;\n};\n\nexport enum RecoveryMethodType {\n  PhoneNumber = 'phone_number',\n}\n\nexport interface UpdateEmailConfiguration {\n  /**\n   * The new email address to update to\n   */\n  email: string;\n\n  /**\n   * When `true`, a pre-built pending modal interface will\n   * guide the user to check their new, followed by old emails\n   * for confirmation emails.\n   */\n  showUI?: boolean;\n}\n\nexport interface UpdateWebAuthnInfoConfiguration {\n  /**\n   *  WebAuthn info id\n   */\n  id: string;\n\n  /**\n   *  nickname that user attempts to update to the webauth device associate to the id.\n   */\n  nickname: string;\n}\n\nexport interface RecoverAccountConfiguration {\n  /**\n   * The email to recover\n   */\n  email: string;\n}\n\nexport interface ShowSettingsConfiguration {\n  /**\n   * deep linking destination\n   */\n  page: DeepLinkPage;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}