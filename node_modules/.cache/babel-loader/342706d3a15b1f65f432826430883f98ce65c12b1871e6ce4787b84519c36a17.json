{"ast":null,"code":"import { Extension as r } from \"@magic-sdk/commons\";\nvar i = (t => (t.LoginWithOIDC = \"magic_auth_login_with_oidc\", t))(i || {});\nvar n = class extends r.Internal {\n  constructor() {\n    super(...arguments);\n    this.name = \"openid\";\n    this.config = {};\n  }\n  loginWithOIDC(o) {\n    let e = this.utils.createJsonRpcRequestPayload(\"magic_auth_login_with_oidc\", [o]);\n    return this.request(e);\n  }\n};\nexport { i as MagicOpenIdConnectPayloadMethod, n as OpenIdExtension };","map":{"version":3,"names":["Extension","r","i","t","LoginWithOIDC","n","Internal","constructor","arguments","name","config","loginWithOIDC","o","e","utils","createJsonRpcRequestPayload","request","MagicOpenIdConnectPayloadMethod","OpenIdExtension"],"sources":["/Users/gmoon/Documents/GitHub/magic_idp/node_modules/@magic-ext/oidc/src/index.ts","/Users/gmoon/Documents/GitHub/magic_idp/node_modules/@magic-ext/oidc/src/types.ts"],"sourcesContent":["import { Extension } from '@magic-sdk/commons';\nimport { MagicOpenIdConnectPayloadMethod, LoginWithOpenIdParams } from './types';\n\nexport class OpenIdExtension extends Extension.Internal<'openid', any> {\n  name = 'openid' as const;\n  config: any = {};\n\n  public loginWithOIDC(params: LoginWithOpenIdParams) {\n    const requestPayload = this.utils.createJsonRpcRequestPayload(MagicOpenIdConnectPayloadMethod.LoginWithOIDC, [\n      params,\n    ]);\n    return this.request<string>(requestPayload);\n  }\n}\n\nexport * from './types';\n","export interface LoginWithOpenIdParams {\n  jwt: string;\n  providerId: string;\n}\n\nexport enum MagicOpenIdConnectPayloadMethod {\n  LoginWithOIDC = 'magic_auth_login_with_oidc',\n}\n"],"mappings":"AAAA,SAASA,SAAA,IAAAC,CAAA,QAAiB;ACKnB,IAAKC,CAAA,IAAAC,CAAA,KACVA,CAAA,CAAAC,aAAA,GAAgB,8BADND,CAAA,GAAAD,CAAA;ADFL,IAAMG,CAAA,GAAN,cAA8BJ,CAAA,CAAUK,QAAwB;EAAhEC,YAAA;IAAA,SAAAC,SAAA;IACL,KAAAC,IAAA,GAAO;IACP,KAAAC,MAAA,GAAc,CAAC;EAAA;EAERC,cAAcC,CAAA,EAA+B;IAClD,IAAMC,CAAA,GAAiB,KAAKC,KAAA,CAAMC,2BAAA,+BAA2E,CAC3GH,CACF,CAAC;IACD,OAAO,KAAKI,OAAA,CAAgBH,CAAc,CAC5C;EAAA;AACF;AAAA,SAAAX,CAAA,IAAAe,+BAAA,EAAAZ,CAAA,IAAAa,eAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}